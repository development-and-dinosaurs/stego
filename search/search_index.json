{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Stego","text":"<p>Stego: State Transition Event Guard Orchestrator</p> <p>Stego is a Kotlin-first framework for building state-driven, dynamic applications. At its core, Stego is a state machine orchestrator that can break down complex business problems into manageable flows.</p>"},{"location":"#what-is-stego","title":"What is Stego?","text":"<p>Stego is built on the concepts of Harel statecharts, or extended state machines. It provides a structured way to manage application complexity.</p> <ul> <li> <p>State: Represents a specific mode or condition of your application. A state defines the things we are interested in (<code>events</code>) and what can happen off the back of them (<code>transitions</code>).</p> </li> <li> <p>Transition: A directive that moves the application from one <code>State</code> to another. A transition is triggered by an <code>Event</code>.</p> </li> <li> <p>Event: A message that represents an occurrence in your application, such as a user clicking a button (<code>\"SUBMIT\"</code>) or data arriving from a server (<code>\"FETCH_SUCCESS\"</code>). Events are the sole mechanism for triggering state transitions.</p> </li> <li> <p>Guard: A condition (a function that returns <code>true</code> or <code>false</code>) that determines whether a <code>Transition</code> should be taken in response to an <code>Event</code>. This allows for dynamic, conditional logic.</p> </li> <li> <p>Orchestrator: The engine that puts it all together. The orchestrator listens for events, checks guards, executes transitions, and manages the overall application state. In Stego, this orchestration can include rendering a UI, making API calls, or performing any other side effect.</p> </li> </ul> <p>We know what you're thinking. \"What about <code>Actions</code>? <code>Invokables</code>? <code>Extended State</code>?\" Look, we had a choice: a cool, dinosaur-themed acronym, or a technically accurate one. We couldn't have both. We stand by our decision. All of those features and more are supported by Stego - so don't worry, you get all the features and the cool name. Win-win. Tell your friends.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#server-driven","title":"Server-Driven","text":"<p>Back in the Jurassic, APIs only sent raw data. Evolve your architecture and define not just your UI, but your entire application's behavior on the server to be sent to the client.</p>"},{"location":"#testable-by-design","title":"Testable by Design","text":"<p>Make bugs extinct. By modeling logic as a formal state machine, your application's behavior becomes deterministic and easy to test, eliminating entire classes of bugs.</p>"},{"location":"#easily-extensible","title":"Easily Extensible","text":"<p>Don't be a fossil. Stego is built to adapt, allowing you to quickly add your own custom UI components, actions, or invokable services with just a few lines of code.</p>"},{"location":"#guaranteed-predictability","title":"Guaranteed Predictability","text":"<p>Chaos theory is great for blockbuster movies, but terrible for application state. Eliminate race conditions and impossible states with explicit, guarded transitions.</p>"},{"location":"#one-source-of-truth","title":"One Source of Truth","text":"<p>Stop reassembling your business logic for each platform like a paleontologist piecing together a fossil. Define it once as a single source of truth and share it across Android, iOS, JS, and beyond.</p>"},{"location":"about/","title":"About Stego","text":""},{"location":"about/#the-motivation","title":"The Motivation","text":"<p>Modern application development often involves managing complex, ever-changing state. As features grow, so does the potential for bugs, race conditions, and unpredictable behavior. How many times have you found your application in a state you thought was impossible?</p> <p>Stego was born out of a need to bring order to this chaos. Inspired by the formalisms of Harel statecharts, we wanted to create a Kotlin-first framework that puts predictable state management at the very heart of the application architecture.</p> <p>The goal was to build a system where developers could model complex business logic as a series of clear, testable states and transitions, effectively eliminating entire classes of bugs.</p>"},{"location":"about/#the-philosophy-structure-and-predictability","title":"The Philosophy: Structure and Predictability","text":"<p>The name Stego is an acronym for State Transition Event Guard Orchestrator. This isn't just a name; it's our core philosophy. We believe that by breaking down application logic into these fundamental components, we can build more robust, maintainable, and understandable software.</p> <p>By enforcing that all state changes happen through explicit events and guarded transitions, Stego ensures that your application behaves exactly as you designed it to.</p>"},{"location":"about/#why-stego","title":"Why \"Stego\"?","text":"<p>The name is a nod to the Stegosaurus, fitting the theme of our home at Development and Dinosaurs. Just as the Stegosaurus had plates for structure and defense, Stego provides a strong, structured backbone for your application's logic.</p> <p>Plus, let's be honest: it's one of the few recognizable dinosaur names that actually works as an acronym. You try making one out of 'Pachycephalosaurus'. We'll wait.</p>"},{"location":"about/#open-source-and-community","title":"Open Source and Community","text":"<p>Stego is a fully open-source project. We believe in the power of community and welcome contributions of all kinds. Whether you're fixing a bug, proposing a new feature, or improving the documentation, we'd love to have you involved.</p> <p>Check out our GitHub repository to get started!</p>"},{"location":"developer-guide/","title":"Developer Guide","text":"<p>Welcome to the Stego developer guide! We're thrilled that you're interested in contributing. This guide is for anyone who wants to help improve Stego, whether you're a first-time open-source contributor or an experienced developer.</p> <p>If you haven't already, we recommend reading the Home and About pages to get a feel for the project's philosophy and core concepts.</p>"},{"location":"developer-guide/#getting-started","title":"Getting Started","text":"<p>Stego is a Kotlin Multiplatform project built with Gradle. To get started with development, you'll need:</p> <ol> <li>A recent version of the JDK (we use JDK 21 for publishing).</li> <li>IntelliJ IDEA is highly recommended for the best development experience.</li> <li>Clone the repository: <code>git clone https://github.com/development-and-dinosaurs/stego.git</code></li> <li>Open the project in IntelliJ IDEA and let it sync with Gradle.</li> </ol>"},{"location":"developer-guide/#how-to-contribute","title":"How to Contribute","text":"<p>We welcome contributions of all kinds! Here are a few ways you can help:</p> <ul> <li>Reporting Bugs: If you find a bug, please open an issue on our GitHub repository. Provide as much detail as possible to help us reproduce and fix it.</li> <li>Suggesting Enhancements: Have an idea for a new feature or an improvement? We'd love to hear it! Open an issue to start the discussion.</li> <li>Writing Documentation: Clear documentation is crucial. If you see an area that could be improved, feel free to open a pull request.</li> <li>Submitting Code: Fork the repository, create a new branch for your feature or bugfix, and open a pull request when you're ready.</li> </ul>"},{"location":"developer-guide/#project-structure","title":"Project Structure","text":"<p>The project is organized into several key modules:</p>"},{"location":"developer-guide/#domain","title":"<code>domain</code>","text":"<p>Contains the core, platform-agnostic logic for the state machine (<code>domain:core</code>) and UI models (<code>domain:ui-core</code>). This is where the fundamental building blocks like <code>State</code>, <code>Transition</code>, <code>Event</code>, <code>Guard</code>, and the <code>Orchestrator</code> live.</p>"},{"location":"developer-guide/#data","title":"<code>data</code>","text":"<p>Contains the translation layer between JSON representations and the core domain models.</p>"},{"location":"developer-guide/#presentation","title":"<code>presentation</code>","text":"<p>Contains the UI implementations that can be used to present Stego state machines as a user interface.</p>"},{"location":"developer-guide/#di","title":"<code>di</code>","text":"<p>Contains the dependency injection implementations that hook everything together for consumers.</p>"},{"location":"developer-guide/#examples","title":"<code>examples</code>","text":"<p>Contains examples of using Stego across various platforms.</p>"},{"location":"developer-guide/#docs","title":"<code>docs</code>","text":"<p>The source for this documentation site!</p>"},{"location":"developer-guide/#further-reading","title":"Further Reading","text":"<p>Inside this developer guide you'll find specific pages describing how to achieve common tasks when developing Stego.</p>"},{"location":"developer-guide/adding-a-new-ui-node/","title":"Adding a new UI node","text":"<p>Adding a new Stego UI node is accomplished by performing the following actions:</p>"},{"location":"developer-guide/adding-a-new-ui-node/#domain-layer","title":"Domain Layer","text":"<p>Add the new <code>UiNode</code> interface to the <code>domain:ui-core</code> module.</p> MyNewUiNode.kt<pre><code>data class MyNewUiNode(\n    override val id: String,\n    val text: String,\n) : UiNode\n</code></pre>"},{"location":"developer-guide/adding-a-new-ui-node/#presentation-layer","title":"Presentation Layer","text":"<p>You should add the specific UI implementations here for each platform. The presentation layer in is <code>presentation:ui</code>.</p>"},{"location":"developer-guide/adding-a-new-ui-node/#add-android-implementation","title":"Add Android Implementation","text":"<p>Android implementations are in the <code>presentation:ui:android</code> module.</p>"},{"location":"developer-guide/adding-a-new-ui-node/#add-a-new-composable-implementation-for-the-new-node","title":"Add a new <code>Composable</code> implementation for the new node.","text":"MyNewUiNode.kt<pre><code>@Composable\nfun RenderMyNewUiNode(myNewUiNode: MyNewUiNode) {\n    Text(text = myNewUiNode.text)\n}\n</code></pre>"},{"location":"developer-guide/adding-a-new-ui-node/#add-a-new-render-function-in-renderkt","title":"Add a new render function in <code>Render.kt</code>.","text":"<p>Need to update the <code>RenderInternal</code> function too, to add the branch to the <code>when</code> block.</p> Render.kt<pre><code>@Composable\nprivate fun RenderMyNew(\n    uiNode: MyNewUiNode,\n    context: Context,\n) {\n    val resolvedNode = uiNode.copy(text = resolve(uiNode.text, context))\n    RenderMyNewUiNode(resolvedNode)\n}\n\n@Composable\nprivate fun RenderInternal(\n    // Other parameters\n    context: Context,\n) {\n    when (uiNode) {\n        // Other nodes\n        is MyNewUiNode -&gt; RenderMyNewUiNode(uiNode, context)\n    }\n}\n</code></pre>"},{"location":"developer-guide/adding-a-new-ui-node/#data-layer","title":"Data Layer","text":"<p>The data layer needs updating to convert between JSON representations and the core domain models.</p>"},{"location":"developer-guide/adding-a-new-ui-node/#add-kotlinx-implementation","title":"Add Kotlinx Implementation","text":"<p>Kotlinx implementations are in the <code>data:serialisation:kotlinx:ui</code> module.</p>"},{"location":"developer-guide/adding-a-new-ui-node/#add-a-new-dto-for-the-json-deserialisation","title":"Add a new DTO for the JSON deserialisation.","text":"MyNewUiNodeDto.kt<pre><code>@Serializable\n@SerialName(\"my-new\")\ndata class MyNewUiNodeDto(\n    override val id: String,\n    val text: String,\n) : UiNodeDto\n</code></pre>"},{"location":"developer-guide/adding-a-new-ui-node/#add-a-new-mapper-between-the-dto-and-the-domain-model","title":"Add a new mapper between the DTO and the domain model.","text":"MyNewUiNodeMapper.kt<pre><code>class MyNewUiNodeMapper : UiNodeMapper {\n    override fun map(dto: UiNodeDto): UiNode {\n        require(dto is MyNewUiNodeDto) { \"MyNewUiNodeMapper can only map MyNewUiNodeDto\" }\n        return MyNewUiNode(\n            id = dto.id,\n            text = dto.text,\n        )\n    }\n}\n</code></pre>"},{"location":"developer-guide/adding-a-new-ui-node/#add-a-test-class-and-tests-for-the-new-mapper","title":"Add a test class and tests for the new mapper.","text":"<p>We use Kotest, specifically using the BehaviourSpec because it's cool.</p> MyNewUiNodeMapperTest.kt<pre><code>class MyNewUiNodeMapperTest : BehaviorSpec({\n    Given(\"a MyNewUiNodeMapper\") {\n        val mapper = UiNodeMapper()\n\n        And(\"a MyNewUiNodeDto\") {\n            val dto = MyNewUiNodeDto(\n                id = \"my-id\",\n                text = \"Hello, Stego!\",\n            )\n\n            When(\"the dto is mapped\") {\n                val uiNode = mapper.map(dto)\n\n                Then(\"all properties are mapped correctly\") {\n                    uiNode.shouldBeInstanceOf&lt;MyNewUiNode&gt;()\n                    uiNode.id shouldBe \"my-id\"\n                    uiNode.text shouldBe \"Hello, Stego!\"\n                }\n            }\n        }\n\n        And(\"a non-MyNewUiNodeDto\") {\n            val dto = OtherUiNodeDto\n\n            When(\"the dto is mapped\") {\n                val exception = shouldThrow&lt;IllegalArgumentException&gt; {\n                    mapper.map(dto)\n                }\n\n                Then(\"it should throw an IllegalArgumentException\") {    \n                    exception.message shouldBe \"MyNewUiNodeMapper can only map MyNewUiNodeDto.\"\n                }\n            }\n        }\n    }\n})\n</code></pre>"},{"location":"developer-guide/adding-a-new-ui-node/#add-polymorphic-subclass-to-stegouiserializersmodule","title":"Add polymorphic subclass to StegoUiSerializersModule","text":"StegoUiSerializersModule.kt<pre><code>val stegoUiSerializersModule = SerializersModule {\n    polymorphic(UiNodeDto::class) {\n        // Other subclasses\n        subclass(ColumnUiNodeDto::class)\n    }\n    // Other polymorphic mappings\n}\n</code></pre>"},{"location":"developer-guide/adding-a-new-ui-node/#add-a-test-for-the-new-ui-node-json","title":"Add a test for the new UI node JSON","text":"StegoUiSerializersModuleTest.kt<pre><code>class StegoUiSerializersModuleTest : BehaviorSpec({\n    // Other tests\n    Given(\"A JSON representation of MyNewUiNode\") {\n        val nodeJson =\n            \"\"\"\n            {\n              \"type\": \"my-new\",\n              \"id\": \"my-id\",\n              \"text\": \"Welcome to Stego!\"\n            }\n            \"\"\".trimIndent()\n        When(\"deserializing a MyNewUiNodeDto\") {\n            val nodeDto = json.decodeFromString&lt;UiNodeDto&gt;(nodeJson)\n\n            Then(\"it should deserialize correctly\") {\n                nodeDto.shouldBeInstanceOf&lt;MyNewUiNodeDto&gt;()\n                nodeDto.id shouldBe \"my-id\"\n                nodeDto.text shouldBe \"Welcome to Stego!\"\n            }\n        }\n    }\n</code></pre>"},{"location":"developer-guide/adding-a-new-ui-node/#dependency-injection-layer","title":"Dependency Injection Layer","text":"<p>The dependency injection layer is in <code>di</code></p>"},{"location":"developer-guide/adding-a-new-ui-node/#add-koin-kotlinx-injections","title":"Add Koin Kotlinx injections","text":"<p>Kotlinx implementations are in the <code>di:koin:kotlinx:ui</code> module.</p>"},{"location":"developer-guide/adding-a-new-ui-node/#add-the-mapper-to-the-stegouikoinmodule","title":"Add the mapper to the <code>StegoUiKoinModule</code>","text":"StegoUiKoinModule.kt<pre><code>val module: Module = module {\n    // Other stuff\n    single {\n        CompositeUiNodeMapper(\n            simpleMappers =\n                mapOf(\n                    // Other pairs\n                    MyNewUiNodeDto::class to MyNewUiNodeMapper(),\n                )\n        )\n    } bind UiNodeMapper::class     \n</code></pre>"}]}